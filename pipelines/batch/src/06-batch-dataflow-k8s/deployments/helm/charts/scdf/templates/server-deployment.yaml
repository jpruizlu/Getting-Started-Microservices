apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "scdf.fullname" . }}-server
  labels:
    app: {{ template "scdf.name" . }}
    component: server
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  selector:
    matchLabels:
      app: {{ template "scdf.name" . }}
      component: server
      release: "{{ .Release.Name }}"
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ template "scdf.name" . }}
        component: server
        release: "{{ .Release.Name }}"
    spec:
      containers:
      - name: {{ template "scdf.fullname" . }}-server
        image: {{ .Values.server.image }}:{{ .Values.server.version }}
        imagePullPolicy: {{ .Values.server.imagePullPolicy }}
        ports:
        - containerPort: 8080
          name: http
        resources:
{{ toYaml .Values.server.resources | indent 10 }}
        livenessProbe:
          httpGet:
            path: /management/health
            port: http
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /management/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
        env:
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
        - name: SERVER_PORT
          value: '8080'
        - name: SPRING_CLOUD_CONFIG_ENABLED
          value: 'false'
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_ENABLE_API
          value: 'true'
        - name: SPRING_CLOUD_KUBERNETES_SECRETS_PATHS
          value: /etc/secrets
        - name: SPRING_CLOUD_KUBERNETES_CONFIG_NAME
          value: {{ template "scdf.fullname" . }}-server
        - name: SPRING_CLOUD_SKIPPER_CLIENT_SERVER_URI
          value: 'http://${{ printf "{" }}{{ template "scdf.envname" . }}_SKIPPER_SERVICE_HOST}/api'
        - name: SPRING_CLOUD_DATAFLOW_SERVER_URI
          value: 'http://${{ printf "{" }}{{ template "scdf.envname" . }}_SERVER_SERVICE_HOST}:${{ printf "{" }}{{ template "scdf.envname" . }}_SERVER_SERVICE_PORT}'
        - name: SPRING_APPLICATION_JSON
          value: "{ \"maven\": { \"local-repository\": null, \"remote-repositories\": { \"repo1\": { \"url\": \"https://repo.spring.io/libs-snapshot\"} } } }"
        - name: SPRING_DATASOURCE_URL
          value: jdbc:{{ .Values.datasource.type }}://{{ template "scdf.database" . }}:{{ .Values.datasource.port }}/{{ .Values.datasource.database }}
        - name: SPRING_DATASOURCE_USERNAME
          value: {{ .Values.datasource.username }}
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "scdf.fullname" . }}
              key: database-password
        - name: SPRING_DATASOURCE_DRIVER_CLASS_NAME
          value: {{ .Values.datasource.driverClassName }}
      initContainers:
      - name: init-db-wait
        image: busybox
        command: ['sh', '-c', 'until nc -w3 -z {{ template "scdf.database" . }} {{ .Values.datasource.port }}; do echo waiting for database; sleep 3; done;']
      - name: init-create-dataflow
        image: postgres:10.7-alpine
        command: ['sh', '-c', 'PGPASSWORD={{ .Values.datasource.password }} createuser -h {{ template "scdf.database" . }} -p {{ .Values.datasource.port }} -U {{ .Values.datasource.username }} {{ .Values.datasource.database }}; PGPASSWORD={{ .Values.datasource.password }} createdb -h {{ template "scdf.database" . }} -p {{ .Values.datasource.port }} -O {{ .Values.datasource.database }} -U {{ .Values.datasource.username }} {{ .Values.datasource.database }};echo 0']

serviceAccountName: {{ template "scdf.serviceAccountName" . }}
